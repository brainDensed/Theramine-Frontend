import { useState, useEffect, useRef } from "react";
import { useAccount } from "wagmi";
import { useSocket } from "../context/SocketContext";
import { useLocation, useParams } from "react-router";
import { motion } from "framer-motion";
import { ipfsChatService } from "../services/ipfsService";

function ChatComponent() {
  const { address } = useAccount();
  const { socket, messages, setMessages } = useSocket();
  const { roomId } = useParams();
  const location = useLocation();
  const [input, setInput] = useState("");
  const [lastSavedHash, setLastSavedHash] = useState(null);
  const [isLoadingHistory, setIsLoadingHistory] = useState(true);

  const { therapistId, userId } = location.state || {};
  const endRef = useRef(null);

  // Generate persistent room ID for this user-therapist pair
  const persistentRoomId = ipfsChatService.generateRoomId(
    userId || address || "user", 
    therapistId || "therapist"
  );

  // Load existing chat history when component mounts
  useEffect(() => {
    loadChatHistory();
  }, [persistentRoomId]);

  const loadChatHistory = async () => {
    try {
      setIsLoadingHistory(true);
      console.log("üìö Loading chat history for room:", persistentRoomId);
      
      const chatHistory = await ipfsChatService.getChatRoom(persistentRoomId);
      
      if (chatHistory && chatHistory.messages) {
        console.log(`‚úÖ Loaded ${chatHistory.messages.length} messages from history`);
        setMessages(chatHistory.messages);
      }
    } catch (error) {
      console.log("‚ÑπÔ∏è No existing chat history found, starting fresh");
      setMessages([]);
    } finally {
      setIsLoadingHistory(false);
    }
  };

  const handleSend = async () => {
    if (!input.trim()) return;

    const messageData = {
      message: input,
      sender: "me",
      timestamp: new Date().toISOString(),
      type: "chat",
      userId: userId || address || "user",
      therapistId: therapistId || "therapist",
    };

    // Add message to local state immediately
    const newMessages = [...messages, messageData];
    setMessages(newMessages);
    setInput("");

    try {
      // Send via WebSocket for real-time communication
      if (socket && socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify({
          type: "chat",
          ...messageData,
          roomId: persistentRoomId,
        }));
      }

      // Store to IPFS with updated message list
      const ipfsHash = await ipfsChatService.addMessageToRoom(
        persistentRoomId,
        messageData,
        {
          userInfo: { id: userId || address || "user" },
          therapistInfo: { id: therapistId || "therapist" },
        }
      );

      setLastSavedHash(ipfsHash);
      console.log("üíæ Message saved to IPFS:", ipfsHash);

    } catch (error) {
      console.error("‚ùå Error saving message:", error);
    }
  };

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    endRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);
      );
    } catch (error) {
      console.error("Failed to store message to IPFS:", error);
      // Message is still sent via WebSocket, IPFS is just backup
    }
  };

  // Save entire chat session to IPFS
  const saveChatSession = async () => {
    if (messages.length === 0) return;
    
    try {
      const ipfsHash = await storeChatRoom(messages);
      setLastSavedHash(ipfsHash);
      console.log(`üíæ Chat session saved to IPFS: ${ipfsHash}`);
      
      // Store hash in localStorage for later retrieval
      localStorage.setItem(`chat-session-${roomId}`, ipfsHash);
    } catch (error) {
      console.error("Failed to save chat session:", error);
    }
  };

  // Create permanent chat log
  const createPermanentLog = async () => {
    if (messages.length === 0) return;
    
    try {
      const ipfsHash = await createChatLog(messages);
      console.log(`üìö Permanent chat log created: ${ipfsHash}`);
      
      // Store in localStorage with timestamp
      const logData = {
        hash: ipfsHash,
        timestamp: new Date().toISOString(),
        messageCount: messages.length,
      };
      localStorage.setItem(`chat-log-${roomId}-${Date.now()}`, JSON.stringify(logData));
    } catch (error) {
      console.error("Failed to create permanent log:", error);
    }
  };

  // Auto scroll
  useEffect(() => {
    endRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // Auto-save to IPFS every 10 messages
  useEffect(() => {
    if (messages.length > 0 && messages.length % 10 === 0) {
      saveChatSession();
    }
  }, [messages.length]);

  // Save on component unmount (when user leaves chat)
  useEffect(() => {
    return () => {
      if (messages.length > 0) {
        saveChatSession();
      }
    };
  }, [messages]);

  return (
    <div className="flex flex-col max-w-2xl mx-auto h-full">
      {/* Header with IPFS status */}
      <div className="flex-shrink-0 px-4 py-2">
        <div className="flex items-center justify-between bg-white/10 backdrop-blur-xl border border-white/20 rounded-xl p-3 mb-2">
          <div className="flex items-center gap-2">
            <span className="text-white/70 text-sm">Chat Room: {roomId}</span>
            {isStoring && (
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-yellow-400 rounded-full animate-pulse"></div>
                <span className="text-yellow-400 text-xs">Storing to IPFS...</span>
              </div>
            )}
            {lastSavedHash && (
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                <span className="text-green-400 text-xs">Saved to IPFS</span>
              </div>
            )}
          </div>
          <div className="flex gap-2">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={saveChatSession}
              disabled={isStoring || messages.length === 0}
              className="px-3 py-1 text-xs rounded-lg bg-blue-500/20 text-blue-300 border border-blue-500/30 hover:bg-blue-500/30 transition disabled:opacity-50"
            >
              üíæ Save
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={createPermanentLog}
              disabled={isStoring || messages.length === 0}
              className="px-3 py-1 text-xs rounded-lg bg-purple-500/20 text-purple-300 border border-purple-500/30 hover:bg-purple-500/30 transition disabled:opacity-50"
            >
              üìö Archive
            </motion.button>
          </div>
        </div>
        {ipfsError && (
          <div className="bg-red-500/20 border border-red-500/30 rounded-lg p-2 mb-2">
            <span className="text-red-300 text-xs">‚ö†Ô∏è IPFS Error: {ipfsError}</span>
          </div>
        )}
      </div>
      {/* Messages Container */}
      <div className="flex-1 flex flex-col min-h-0 px-4">
        <div
          className={`flex-1 px-3 space-y-3 ${
            messages.length > 0
              ? "overflow-y-auto"
              : "flex items-center justify-center"
          }`}
        >
          {messages.length === 0 ? (
            <p className="text-white/50 italic">No messages yet...</p>
          ) : (
            <div className="py-4">
              {messages.map((m, i) => (
                <motion.div
                  key={i}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2 }}
                  className={`max-w-[75%] px-4 py-2 rounded-2xl shadow-md backdrop-blur-md mb-3 ${
                    m.sender === "me"
                      ? "ml-auto bg-[var(--color-accent)] text-black"
                      : "mr-auto bg-[var(--color-secondary)] text-black"
                  }`}
                >
                  <p className="text-xs opacity-70 font-semibold">{m.sender}</p>
                  <p className="text-base">{m.message}</p>
                  {m.ipfsHash && (
                    <div className="flex items-center gap-1 mt-1">
                      <div className="w-1.5 h-1.5 bg-green-400 rounded-full"></div>
                      <span className="text-xs opacity-50">Stored on IPFS</span>
                    </div>
                  )}
                </motion.div>
              ))}
              <div ref={endRef} />
            </div>
          )}
        </div>
      </div>

      {/* Input bar */}
      <div className="flex-shrink-0 px-4 pb-4">
        <div className="flex items-center gap-2 p-4 bg-white/10 backdrop-blur-xl border border-white/20 rounded-2xl shadow-lg mb-2">
          <input
            className="flex-1 px-4 py-2 rounded-xl bg-white/20 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-[var(--color-primary)]"
            value={input}
            placeholder="Type a message..."
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => e.key === "Enter" && handleSend()}
          />
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleSend}
            disabled={!input.trim()}
            className="px-5 py-2 rounded-xl bg-[var(--color-primary)] text-black font-semibold shadow-lg hover:shadow-xl transition disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Send
          </motion.button>
        </div>
      </div>
    </div>
  );
}

export default ChatComponent;
